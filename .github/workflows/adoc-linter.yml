name: Qodana Documentation validation
on:
  push:
  pull_request:
    branches: [ main ]

concurrency:
  # Only run once for latest commit per ref and cancel other (previous) runs.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # pipeline from this example: https://intellij-asciidoc-plugin.ahus1.de/docs/users-guide/features/advanced/validation-cicd.html#example-setup-for-github-actions
  qodana-docs:
    name: Qodana Docs
    runs-on: ubuntu-latest
    permissions:
      # necessary for the runs of push to store security events in the repo
      # GitHub code scanning will treat any grammar error like any security event.
      security-events: write
    steps:

      - name: Fetch Sources
        if: github.event_name != 'pull_request'
        uses: actions/checkout@v4

      - name: Fetch Sources
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v4
        with:
          fetch-depth: ${{ github.event.pull_request.commits }}

      - name: Download AsciiDoc plugin for AsciiDoc checks
        run: |
          curl -L -o asciidoctor-intellij-plugin.zip https://github.com/asciidoctor/asciidoctor-intellij-plugin/releases/download/0.41.2/asciidoctor-intellij-plugin-0.41.2.zip
          unzip asciidoctor-intellij-plugin.zip

      - name: Download Grazie plugin for grammar checks
        # https://plugins.jetbrains.com/plugin/12175-grazie/versions
        run: |
          curl -L -o grazie.zip 'https://plugins.jetbrains.com/plugin/download?rel=true&updateId=257026'
          unzip grazie.zip

      - name: Download Grazie Professional plugin for grammar checks
        # https://plugins.jetbrains.com/plugin/16136-grazie-professional/versions
        run: |
          curl -L -o grazie-pro.zip 'https://plugins.jetbrains.com/plugin/download?rel=true&updateId=260567'
          unzip grazie-pro.zip

      - name: Create empty folder to overwrite disabled plugin
        run: |
          mkdir empty

      - name: Get one more commit so Qodana can identify the changes
        if: github.event_name == 'pull_request'
        run: git fetch --deepen=1

      - name: 'Qodana for Docs'
        uses: JetBrains/qodana-action@v2023.3.0
        with:
          upload-result: true
          # https://hub.docker.com/r/jetbrains/qodana-jvm-community/tags
          # this disables the Gradle plugin to avoid the Gradle initialization and the dependency download
          # as that is not necessary for the Grazie and AsciiDoc plugins to check spelling and links.
          # TODO: the plugin `org.jetbrains.plugins.gradle` should also be suppressed, but the parameter doesn't allow
          # a comma when called from the Qodana action. Therefore overwrite it with an empty folder.
          args: >
            --linter,jetbrains/qodana-jvm-community:2023.3,
            --property=idea.suppressed.plugins.id=com.intellij.gradle,
            -v,${{ github.workspace }}/grazie:/opt/idea/plugins/grazie,
            -v,${{ github.workspace }}/empty:/opt/idea/plugins/gradle-java,
            -v,${{ github.workspace }}/grazie-pro:/opt/idea/plugins/grazie-pro,
            -v,${{ github.workspace }}/asciidoctor-intellij-plugin:/opt/idea/plugins/asciidoctor-intellij-plugin,
            --baseline,doc/qodana-baseline.sarif.json

      # https://docs.github.com/en/code-security/code-scanning/integrating-with-code-scanning/uploading-a-sarif-file-to-github#example-workflow-that-runs-the-eslint-analysis-tool
      - name: Upload SARIF report to GitHub
        # so that it is present on all pull requests and GitHub shows the comparison results
        uses: github/codeql-action/upload-sarif@v3
        with:
          # Path to SARIF file relative to the root of the repository
          sarif_file: ${{ runner.temp }}/qodana/results/qodana.sarif.json
